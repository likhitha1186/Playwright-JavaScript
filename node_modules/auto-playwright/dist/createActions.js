"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createActions = void 0;
const crypto_1 = require("crypto");
const zod_1 = require("zod");
const createActions = (page) => {
    const locatorMap = new Map();
    const getLocator = (elementId) => {
        const locator = locatorMap.get(elementId);
        if (!locator) {
            throw new Error('Unknown elementId "' + elementId + '"');
        }
        return locator;
    };
    return {
        locateElement: {
            function: async (args) => {
                const locator = await page.locator(args.cssSelector);
                const elementId = (0, crypto_1.randomUUID)();
                locatorMap.set(elementId, locator);
                return {
                    elementId,
                };
            },
            name: "locateElement",
            description: "Locates element using a CSS selector and returns elementId. This element ID can be used with other functions to perform actions on the element.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    cssSelector: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    cssSelector: {
                        type: "string",
                    },
                },
            },
        },
        locator_evaluate: {
            function: async (args) => {
                return {
                    result: await getLocator(args.elementId).evaluate(args.pageFunction),
                };
            },
            description: "Execute JavaScript code in the page, taking the matching element as an argument.",
            name: "locator_evaluate",
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                    pageFunction: {
                        type: "string",
                        description: "Function to be evaluated in the page context, e.g. node => node.innerText",
                    },
                },
            },
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                    pageFunction: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
        },
        locator_getAttribute: {
            function: async (args) => {
                return {
                    attributeValue: await getLocator(args.elementId).getAttribute(args.attributeName),
                };
            },
            name: "locator_getAttribute",
            description: "Returns the matching element's attribute value.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                    attributeName: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    attributeName: {
                        type: "string",
                    },
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_innerHTML: {
            function: async (args) => {
                return { innerHTML: await getLocator(args.elementId).innerHTML() };
            },
            name: "locator_innerHTML",
            description: "Returns the element.innerHTML.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_innerText: {
            function: async (args) => {
                return { innerText: await getLocator(args.elementId).innerText() };
            },
            name: "locator_innerText",
            description: "Returns the element.innerText.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_textContent: {
            function: async (args) => {
                return {
                    textContent: await getLocator(args.elementId).textContent(),
                };
            },
            name: "locator_textContent",
            description: "Returns the node.textContent.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_inputValue: {
            function: async (args) => {
                return {
                    inputValue: await getLocator(args.elementId).inputValue(),
                };
            },
            name: "locator_inputValue",
            description: "Returns input.value for the selected <input> or <textarea> or <select> element.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_blur: {
            function: async (args) => {
                await getLocator(args.elementId).blur();
                return { success: true };
            },
            name: "locator_blur",
            description: "Removes keyboard focus from the current element.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_boundingBox: {
            function: async (args) => {
                return await getLocator(args.elementId).boundingBox();
            },
            name: "locator_boundingBox",
            description: "This method returns the bounding box of the element matching the locator, or null if the element is not visible. The bounding box is calculated relative to the main frame viewport - which is usually the same as the browser window. The returned object has x, y, width, and height properties.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_check: {
            function: async (args) => {
                await getLocator(args.elementId).check();
                return { success: true };
            },
            name: "locator_check",
            description: "Ensure that checkbox or radio element is checked.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_uncheck: {
            function: async (args) => {
                await getLocator(args.elementId).uncheck();
                return { success: true };
            },
            name: "locator_uncheck",
            description: "Ensure that checkbox or radio element is unchecked.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_isChecked: {
            function: async (args) => {
                return { isChecked: await getLocator(args.elementId).isChecked() };
            },
            name: "locator_isChecked",
            description: "Returns whether the element is checked.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_isEditable: {
            function: async (args) => {
                return {
                    isEditable: await getLocator(args.elementId).isEditable(),
                };
            },
            name: "locator_isEditable",
            description: "Returns whether the element is editable. Element is considered editable when it is enabled and does not have readonly property set.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_isEnabled: {
            function: async (args) => {
                return { isEnabled: await getLocator(args.elementId).isEnabled() };
            },
            name: "locator_isEnabled",
            description: "Returns whether the element is enabled. Element is considered enabled unless it is a <button>, <select>, <input> or <textarea> with a disabled property.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_isVisible: {
            function: async (args) => {
                return { isVisible: await getLocator(args.elementId).isVisible() };
            },
            name: "locator_isVisible",
            description: "Returns whether the element is visible.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_clear: {
            function: async (args) => {
                await getLocator(args.elementId).clear();
                return { success: true };
            },
            name: "locator_clear",
            description: "Clear the input field.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_click: {
            function: async (args) => {
                await getLocator(args.elementId).click();
                return { success: true };
            },
            name: "locator_click",
            description: "Click an element.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_count: {
            function: async (args) => {
                return { elementCount: await getLocator(args.elementId).count() };
            },
            name: "locator_count",
            description: "Returns the number of elements matching the locator.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        locator_fill: {
            function: async (args) => {
                await getLocator(args.elementId).fill(args.value);
                return {
                    success: true,
                };
            },
            name: "locator_fill",
            description: "Set a value to the input field.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    elementId: zod_1.z.string(),
                    value: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    value: {
                        type: "string",
                    },
                    elementId: {
                        type: "string",
                    },
                },
            },
        },
        page_goto: {
            function: async (args) => {
                return {
                    url: await page.goto(args.url),
                };
            },
            name: "page_goto",
            description: "Set a value to the input field.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    cssLocator: zod_1.z.string(),
                    value: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    value: {
                        type: "string",
                    },
                    cssLocator: {
                        type: "string",
                    },
                },
            },
        },
        expect_toBe: {
            function: (args) => {
                return {
                    actual: args.actual,
                    expected: args.expected,
                    success: args.actual === args.expected,
                };
            },
            name: "expect_toBe",
            description: "Asserts that the actual value is equal to the expected value.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    actual: zod_1.z.string(),
                    expected: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    actual: {
                        type: "string",
                    },
                    expected: {
                        type: "string",
                    },
                },
            },
        },
        expect_notToBe: {
            function: (args) => {
                return {
                    actual: args.actual,
                    expected: args.expected,
                    success: args.actual !== args.expected,
                };
            },
            name: "expect_notToBe",
            description: "Asserts that the actual value is not equal to the expected value.",
            parse: (args) => {
                return zod_1.z
                    .object({
                    actual: zod_1.z.string(),
                    expected: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            parameters: {
                type: "object",
                properties: {
                    actual: {
                        type: "string",
                    },
                    expected: {
                        type: "string",
                    },
                },
            },
        },
        resultAssertion: {
            function: (args) => {
                return args;
            },
            parse: (args) => {
                return zod_1.z
                    .object({
                    assertion: zod_1.z.boolean(),
                })
                    .parse(JSON.parse(args));
            },
            description: "This function is called when the initial instructions asked to assert something; then 'assertion' is either true or false (boolean) depending on whether the assertion succeeded.",
            name: "resultAssertion",
            parameters: {
                type: "object",
                properties: {
                    assertion: {
                        type: "boolean",
                    },
                },
            },
        },
        resultQuery: {
            function: (args) => {
                return args;
            },
            parse: (args) => {
                return zod_1.z
                    .object({
                    query: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            description: "This function is called at the end when the initial instructions asked to extract data; then 'query' property is set to a text value of the extracted data.",
            name: "resultQuery",
            parameters: {
                type: "object",
                properties: {
                    query: {
                        type: "string",
                    },
                },
            },
        },
        resultAction: {
            function: () => {
                return null;
            },
            parse: (args) => {
                return zod_1.z.object({}).parse(JSON.parse(args));
            },
            description: "This function is called at the end when the initial instructions asked to perform an action.",
            name: "resultAction",
            parameters: {
                type: "object",
                properties: {},
            },
        },
        resultError: {
            function: (args) => {
                return {
                    errorMessage: args.errorMessage,
                };
            },
            parse: (args) => {
                return zod_1.z
                    .object({
                    errorMessage: zod_1.z.string(),
                })
                    .parse(JSON.parse(args));
            },
            description: "If user instructions cannot be completed, then this function is used to produce the final response.",
            name: "resultError",
            parameters: {
                type: "object",
                properties: {
                    errorMessage: {
                        type: "string",
                    },
                },
            },
        },
    };
};
exports.createActions = createActions;
