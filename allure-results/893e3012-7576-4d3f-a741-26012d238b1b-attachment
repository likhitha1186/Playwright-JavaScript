# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Cards CRUD operation >> Get a field on a Card
- Location: C:\Users\likhithap\Desktop\PlaywrightAutomation\tests\API-TESTING\E2E-TESTS\3_CardCRUD_operation.spec.js:47:5

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 404
    at C:\Users\likhithap\Desktop\PlaywrightAutomation\tests\API-TESTING\E2E-TESTS\3_CardCRUD_operation.spec.js:51:35
```

# Test source

```ts
   1 | import { test, expect } from "@playwright/test";
   2 | import {createCards} from "../HelpersFile/Helpers.js";
   3 | import fs from "fs";
   4 | import {generateRandomFieldName} from "../HelpersFile/GeneratingRandomNames.js";
   5 |
   6 | const { baseURL, CardName, apiKey, token } = createCards();
   7 | const boardDataFile = "./boardData.json";
   8 | const boardData = JSON.parse(fs.readFileSync(boardDataFile, "utf8"));
   9 | const {  boardName, listId,listName } = boardData;
  10 |
  11 |
  12 | test.describe.serial("Cards CRUD operation", () => {
  13 |     test("Create a new card", async ({request}) => {
  14 |         await new Promise(resolve => setTimeout(resolve, 3000)); // Waits for 2 seconds
  15 |         const response = await request.post(`${baseURL}/cards?name=${CardName}&idList=${listId}&key=${apiKey}&token=${token}`, {
  16 |             headers: {Accept: "application/json"},
  17 |         });
  18 |         expect(response.status()).toBe(200);
  19 |         let res = await response.json();
  20 |         const cardId = res.id;
  21 |         const cardName = res.name;
  22 |
  23 |         // Update boardData.json with the new Card details
  24 |         boardData.cardId = cardId;
  25 |         boardData.cardName = cardName;
  26 |         fs.writeFileSync(boardDataFile, JSON.stringify(boardData, null, 2));
  27 |         console.log(`Created Card: ${cardName} on List: ${listName} (Board: ${boardName})`);
  28 |     })
  29 |
  30 |     test("Get a card by its ID", async ({request}) => {
  31 |         const {cardId} = JSON.parse(fs.readFileSync(boardDataFile, "utf8"));
  32 |         const response = await request.get(`${baseURL}/cards/${cardId}?key=${apiKey}&token=${token}`);
  33 |         expect(response.status()).toBe(200);
  34 |     });
  35 |
  36 |     test("Update a card", async ({request}) => {
  37 |         const {cardId} = JSON.parse(fs.readFileSync(boardDataFile, "utf8"));
  38 |         const response = await request.put(`${baseURL}/cards/${cardId}?key=${apiKey}&token=${token}`, {
  39 |             headers: {"Content-Type": "application/json"},
  40 |             data: {
  41 |                 "desc": "Updated description at" + new Date().toISOString()
  42 |             }
  43 |         });
  44 |         expect(response.status()).toBe(200);
  45 |     });
  46 |
  47 |     test("Get a field on a Card", async ({request}) => {
  48 |         const {cardId} = JSON.parse(fs.readFileSync(boardDataFile, "utf8"));
  49 |         const filedName = generateRandomFieldName();
  50 |         const response = await request.get(`${baseURL}/cards/${cardId}/${filedName}?key=${apiKey}&token=${token}`);
> 51 |         expect(response.status()).toBe(200);
     |                                   ^ Error: expect(received).toBe(expected) // Object.is equality
  52 |     });
  53 |
  54 |     test("Get Actions on a Card", async ({request}) => {
  55 |         const {cardId} = JSON.parse(fs.readFileSync(boardDataFile, "utf8"));
  56 |         const response = await request.get(`${baseURL}/cards/${cardId}/actions?key=${apiKey}&token=${token}`);
  57 |         expect(response.status()).toBe(200);
  58 |     });
  59 |
  60 |     test("Create Attachment On Card", async ({request}) => {
  61 |         const {cardId} = JSON.parse(fs.readFileSync(boardDataFile, "utf8"));
  62 |         const response = await request.post(`${baseURL}/cards/${cardId}/attachments?key=${apiKey}&token=${token}`,{
  63 |             data:{
  64 |                 "name" : "trello-power-up",
  65 |                // "file":"C:/Users/likhithap/Downloads/image-20240612-094206",
  66 |                 "mimeType" : "text/png",
  67 |                 "setCover" : "false",
  68 |                "url": "https://trello.com/c/ccPN1tMZ/8-review-meetings"
  69 |                // "url": "https://glitch.com/~trello-attachments-api"
  70 |             }
  71 |         });
  72 |         expect(response.status()).toBe(200);
  73 |         let res = await response.json();
  74 |         boardData.attachmentID = res.id;
  75 |         fs.writeFileSync(boardDataFile, JSON.stringify(boardData, null, 2));
  76 |     });
  77 |
  78 |     test("Get an Attachment On Card", async ({request}) => {
  79 |         const {cardId, attachmentID} = JSON.parse(fs.readFileSync(boardDataFile, "utf8"));
  80 |         const response = await request.get(`${baseURL}/cards/${cardId}/attachments/${attachmentID}?key=${apiKey}&token=${token}`);
  81 |         expect(response.status()).toBe(200);
  82 |     });
  83 |
  84 |     test("Get the Board the Card is on", async ({request}) => {
  85 |         const {cardId} = JSON.parse(fs.readFileSync(boardDataFile, "utf8"));
  86 |         const response = await request.get(`${baseURL}/cards/${cardId}/board?key=${apiKey}&token=${token}`);
  87 |         expect(response.status()).toBe(200);
  88 |         let res = await response.json();
  89 |         expect(res.name).toEqual(boardName)
  90 |     });
  91 | });
```